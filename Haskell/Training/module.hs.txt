--On peut créer des modules et des sous modules, voir comment mettre arborescence dans des sous dossiers: 
Exemple : Geometry.Sphere Dans Geometrie/Sphere

import Data.List


import qualified Data.Map as Map
-- Permet d'éviter les conflit
-- En ghci : :m + Data.List Data.Set Data.Map

-- nub prend array et retourne éléments uniques
test = [1,1,4,5,7,5,9,0]

sphereVolume :: Float -> Float
sphereVolume rayon = (4.0/3.0) * pi * (rayon ^ 2)

sphereArea :: Float -> Float
sphereArea rayon = 4 * pi * (rayon ^ 2)

-- nub prend array et retourne éléments uniques
test = [1,1,4,5,7,5,9,0]
unique = nub test

-- Résoudre 3x² + 5x + 9, 10x³ + 9 et 8x³ + 5x² + x - 1 
poly = map sum $ transpose [[0,3,5,9],[10,0,0,9],[8,5,1,-1]]

{- Data.List
concat : a^pplati liste de liste
nub : élément unique
sort
intersperse : élément entre element de liste
intercalate : liste entre liste de liste
concatMap : Map puis applati
-}
-- l@ e est un alias
map (\l@(x:xs) -> (x,length l)) . group . sort $ [1,1,1,1,2,2,2,2,3,3,2,2,2,5,6,7]
--  length, take, drop, splitAt, !! et replicate Prennent et retournent Int; utliser genericLength

